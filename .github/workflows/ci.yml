name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  # Backend Testing
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tanafos_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: backend
        run: npm ci

      - name: Setup environment variables
        working-directory: backend
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/tanafos_test" > .env
          echo "NODE_ENV=test" >> .env
          echo "PORT=3001" >> .env
          echo "JWT_SECRET=test-jwt-secret-for-ci" >> .env

      - name: Run database migrations
        working-directory: backend
        run: |
          npx prisma migrate deploy
          npx prisma db seed

      - name: Run backend linting
        working-directory: backend
        run: npm run build # This will catch TypeScript errors

      - name: Run backend tests
        working-directory: backend
        run: npm test

      - name: Generate test coverage
        working-directory: backend
        run: npm run test:coverage

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          flags: backend
          directory: ./backend/coverage/

  # Frontend Testing
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run frontend linting
        working-directory: frontend
        run: npm run lint

      - name: Run frontend build
        working-directory: frontend
        run: npm run build

      - name: Run frontend tests
        working-directory: frontend
        run: npm run test:run

      - name: Generate test coverage
        working-directory: frontend
        run: npm run test:coverage

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          flags: frontend
          directory: ./frontend/coverage/

  # Integration Tests (using the test script)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tanafos_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Make test script executable
        run: chmod +x ./run-tests.sh

      - name: Setup backend environment
        working-directory: backend
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/tanafos_test" > .env
          echo "NODE_ENV=test" >> .env
          echo "PORT=3001" >> .env
          echo "JWT_SECRET=test-jwt-secret-for-ci" >> .env

      - name: Run integration test suite
        run: ./run-tests.sh

  # Security and Quality Checks
  security-checks:
    name: Security & Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run security audit (Backend)
        working-directory: backend
        run: npm audit --audit-level=high

      - name: Run security audit (Frontend)
        working-directory: frontend
        run: npm audit --audit-level=high

      - name: Check for vulnerable dependencies
        run: |
          npx audit-ci --config ./audit-ci.json || echo "Audit completed with warnings"

  # Build verification
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install and build backend
        working-directory: backend
        run: |
          npm ci
          npm run build

      - name: Install and build frontend
        working-directory: frontend
        run: |
          npm ci
          npm run build

      - name: Check build artifacts
        run: |
          echo "Backend build artifacts:"
          ls -la backend/dist/ || echo "No backend dist directory found"
          echo "Frontend build artifacts:"
          ls -la frontend/dist/ || echo "No frontend dist directory found"

  # Notify on success/failure
  notify-status:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, security-checks, build-verification]
    if: always()
    
    steps:
      - name: Check overall status
        run: |
          if [[ "${{ needs.backend-tests.result }}" == "success" && \
                "${{ needs.frontend-tests.result }}" == "success" && \
                "${{ needs.integration-tests.result }}" == "success" && \
                "${{ needs.security-checks.result }}" == "success" && \
                "${{ needs.build-verification.result }}" == "success" ]]; then
            echo "✅ All tests passed! Ready for deployment."
            echo "BUILD_STATUS=success" >> $GITHUB_ENV
          else
            echo "❌ Some tests failed. Please check the logs."
            echo "BUILD_STATUS=failed" >> $GITHUB_ENV
            exit 1
          fi

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const status = process.env.BUILD_STATUS;
            const message = status === 'success' 
              ? '✅ **All tests passed!** This PR is ready for review.\n\n🚀 **Tanafos CI/CD Pipeline Results:**\n- ✅ Backend tests\n- ✅ Frontend tests\n- ✅ Integration tests\n- ✅ Security checks\n- ✅ Build verification'
              : '❌ **Some tests failed.** Please check the workflow logs and fix the issues.\n\n💥 **Failed checks need attention before merging.**';
            
            try {
              await github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            } catch (error) {
              console.log('Could not comment on PR:', error.message);
            }